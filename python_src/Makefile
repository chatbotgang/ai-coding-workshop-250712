# AI Coding Workshop Setup
SHELL := /bin/bash
PYTHON_VERSION := 3.12.7
VENV_NAME := ai-coding-workshop
PROJECT_DIR := $(shell pwd)

.PHONY: init help clean lint get-shell-rc setup-pyenv-shell setup-pyenv-virtualenv-shell setup-poetry-shell reload-shell-config restart-shell

# Default target
help:
	@echo "Available targets:"
	@echo "  init          - Initialize development environment"
	@echo "  restart-shell - Restart/reload shell configuration" 
	@echo "  clean         - Clean up virtual environment"
	@echo "  lint          - Run code linting (black, isort, pyright)"
	@echo "  help          - Show this help message"

# Initialize development environment
init:
	@echo "üöÄ Initializing development environment..."
	@$(MAKE) check-install-pyenv
	@$(MAKE) check-install-pyenv-virtualenv
	@$(MAKE) create-virtualenv
	@$(MAKE) set-default-virtualenv
	@$(MAKE) check-install-poetry
	@$(MAKE) install-dependencies
	@$(MAKE) reload-shell-config
	@echo "‚úÖ Development environment initialized successfully!"
	@echo "üí° Shell configuration has been automatically updated and reloaded!"
	@echo "üéØ If you want to restart your shell completely, run: make restart-shell"

# Check and install pyenv
check-install-pyenv:
	@echo "üîç Checking pyenv installation..."
	@if ! command -v pyenv &> /dev/null; then \
		echo "üì¶ Installing pyenv..."; \
		if [[ "$(shell uname)" == "Darwin" ]]; then \
			if command -v brew &> /dev/null; then \
				echo "üîß Installing Python build dependencies..."; \
				HOMEBREW_NO_AUTO_UPDATE=1 brew install openssl readline sqlite3 xz zlib tcl-tk@8 libb2; \
				echo "üì¶ Installing pyenv..."; \
				brew install pyenv; \
			else \
				echo "‚ùå Homebrew not found. Please install Homebrew first."; \
				exit 1; \
			fi; \
		else \
			curl https://pyenv.run | bash; \
		fi; \
		$(MAKE) setup-pyenv-shell; \
	else \
		echo "‚úÖ pyenv is already installed"; \
	fi

# Check and install pyenv-virtualenv
check-install-pyenv-virtualenv:
	@echo "üîç Checking pyenv-virtualenv installation..."
	@if ! pyenv commands | grep -q virtualenv; then \
		echo "üì¶ Installing pyenv-virtualenv..."; \
		if [[ "$(shell uname)" == "Darwin" ]]; then \
			if command -v brew &> /dev/null; then \
				brew install pyenv-virtualenv; \
			else \
				echo "‚ùå Homebrew not found. Please install Homebrew first."; \
				exit 1; \
			fi; \
		else \
			git clone https://github.com/pyenv/pyenv-virtualenv.git $$(pyenv root)/plugins/pyenv-virtualenv; \
		fi; \
		$(MAKE) setup-pyenv-virtualenv-shell; \
	else \
		echo "‚úÖ pyenv-virtualenv is already installed"; \
	fi

# Create virtual environment
create-virtualenv:
	@echo "üèóÔ∏è  Creating virtual environment..."
	@if ! pyenv versions | grep -q "$(PYTHON_VERSION)"; then \
		echo "üì¶ Installing Python $(PYTHON_VERSION)..."; \
		pyenv install $(PYTHON_VERSION); \
	fi
	@if ! pyenv versions | grep -q "$(VENV_NAME)"; then \
		echo "üîß Creating virtual environment $(VENV_NAME)..."; \
		pyenv virtualenv $(PYTHON_VERSION) $(VENV_NAME); \
		echo "‚úÖ Virtual environment $(VENV_NAME) created"; \
	else \
		echo "‚úÖ Virtual environment $(VENV_NAME) already exists"; \
	fi

# Set default virtual environment
set-default-virtualenv:
	@echo "üéØ Setting default virtual environment..."
	@pyenv local $(VENV_NAME)
	@echo "‚úÖ Virtual environment $(VENV_NAME) set as default for this project"

# Check and install poetry
check-install-poetry:
	@echo "üîç Checking poetry installation..."
	@if ! command -v poetry &> /dev/null; then \
		echo "üì¶ Installing poetry..."; \
		curl -sSL https://install.python-poetry.org | python3 -; \
		$(MAKE) setup-poetry-shell; \
	else \
		echo "‚úÖ poetry is already installed"; \
	fi

# Install dependencies
install-dependencies:
	@echo "üì¶ Installing project dependencies..."
	@if command -v poetry &> /dev/null; then \
		poetry sync --no-root; \
		echo "‚úÖ Dependencies installed successfully"; \
	else \
		echo "‚ùå Poetry not found in PATH. Please restart your shell and try again."; \
		exit 1; \
	fi

# Clean up virtual environment
clean:
	@echo "üßπ Cleaning up virtual environment..."
	@if pyenv versions | grep -q "$(VENV_NAME)"; then \
		pyenv uninstall -f $(VENV_NAME); \
		echo "‚úÖ Virtual environment $(VENV_NAME) removed"; \
	else \
		echo "‚ÑπÔ∏è  Virtual environment $(VENV_NAME) not found"; \
	fi
	@if [ -f .python-version ]; then \
		rm .python-version; \
		echo "‚úÖ Local Python version file removed"; \
	fi

# Run code linting
lint:
	@echo "üîç Running code linting..."
	@if command -v poetry &> /dev/null; then \
		echo "üìù Running black (code formatter)..."; \
		poetry run black --check --diff .; \
		echo "üîß Running isort (import sorter)..."; \
		poetry run isort --check-only --diff .; \
		echo "üîé Running pyright (type checker)..."; \
		poetry run pyright; \
		echo "‚úÖ All linting checks completed"; \
	else \
		echo "‚ùå Poetry not found in PATH. Please run 'make init' first."; \
		exit 1; \
	fi

# Helper functions for shell setup
get-shell-rc:
	@if echo "$$SHELL" | grep -q "zsh"; then \
		echo "$$HOME/.zshrc"; \
	elif echo "$$SHELL" | grep -q "bash"; then \
		echo "$$HOME/.bashrc"; \
	else \
		echo "$$HOME/.zshrc"; \
	fi

# Setup pyenv in shell configuration
setup-pyenv-shell:
	@echo "üîß Setting up pyenv in shell configuration..."
	@SHELL_RC=$$($(MAKE) get-shell-rc -s); \
	if [ ! -f "$$SHELL_RC" ]; then \
		touch "$$SHELL_RC"; \
	fi; \
	cp "$$SHELL_RC" "$$SHELL_RC.backup.$$(date +%Y%m%d_%H%M%S)" 2>/dev/null || true; \
	if ! grep -q "PYENV_ROOT" "$$SHELL_RC"; then \
		echo "" >> "$$SHELL_RC"; \
		echo "# pyenv configuration" >> "$$SHELL_RC"; \
		echo "export PYENV_ROOT=\"\$$HOME/.pyenv\"" >> "$$SHELL_RC"; \
		echo "[[ -d \$$PYENV_ROOT/bin ]] && export PATH=\"\$$PYENV_ROOT/bin:\$$PATH\"" >> "$$SHELL_RC"; \
		echo "eval \"\$$(pyenv init -)\"" >> "$$SHELL_RC"; \
		echo "‚úÖ pyenv configuration added to $$SHELL_RC"; \
	else \
		echo "‚úÖ pyenv already configured in $$SHELL_RC"; \
	fi

# Setup pyenv-virtualenv in shell configuration
setup-pyenv-virtualenv-shell:
	@echo "üîß Setting up pyenv-virtualenv in shell configuration..."
	@SHELL_RC=$$($(MAKE) get-shell-rc -s); \
	if [ ! -f "$$SHELL_RC" ]; then \
		touch "$$SHELL_RC"; \
	fi; \
	cp "$$SHELL_RC" "$$SHELL_RC.backup.$$(date +%Y%m%d_%H%M%S)" 2>/dev/null || true; \
	if ! grep -q "pyenv virtualenv-init" "$$SHELL_RC"; then \
		echo "" >> "$$SHELL_RC"; \
		echo "# pyenv-virtualenv configuration" >> "$$SHELL_RC"; \
		echo "eval \"\$$(pyenv virtualenv-init -)\"" >> "$$SHELL_RC"; \
		echo "‚úÖ pyenv-virtualenv configuration added to $$SHELL_RC"; \
	else \
		echo "‚úÖ pyenv-virtualenv already configured in $$SHELL_RC"; \
	fi

# Setup poetry in shell configuration
setup-poetry-shell:
	@echo "üîß Setting up poetry in shell configuration..."
	@SHELL_RC=$$($(MAKE) get-shell-rc -s); \
	if [ ! -f "$$SHELL_RC" ]; then \
		touch "$$SHELL_RC"; \
	fi; \
	cp "$$SHELL_RC" "$$SHELL_RC.backup.$$(date +%Y%m%d_%H%M%S)" 2>/dev/null || true; \
	if ! grep -q "/.local/bin" "$$SHELL_RC"; then \
		echo "" >> "$$SHELL_RC"; \
		echo "# poetry configuration" >> "$$SHELL_RC"; \
		echo "export PATH=\"\$$HOME/.local/bin:\$$PATH\"" >> "$$SHELL_RC"; \
		echo "‚úÖ poetry PATH configuration added to $$SHELL_RC"; \
	else \
		echo "‚úÖ poetry PATH already configured in $$SHELL_RC"; \
	fi

# Reload shell configuration
reload-shell-config:
	@echo "üîÑ Reloading shell configuration..."
	@SHELL_RC=$$($(MAKE) get-shell-rc -s); \
	if [ -f "$$SHELL_RC" ]; then \
		echo "üìÅ Sourcing $$SHELL_RC"; \
		if echo "$$SHELL" | grep -q "zsh"; then \
			zsh -c "source $$SHELL_RC && echo '‚úÖ Shell configuration reloaded successfully (zsh)!'" || \
			echo "‚ö†Ô∏è  Note: Some zsh changes may require a full shell restart"; \
		elif echo "$$SHELL" | grep -q "bash"; then \
			bash -c "source $$SHELL_RC && echo '‚úÖ Shell configuration reloaded successfully (bash)!'" || \
			echo "‚ö†Ô∏è  Note: Some bash changes may require a full shell restart"; \
		else \
			$$SHELL -c "source $$SHELL_RC && echo '‚úÖ Shell configuration reloaded successfully!'" || \
			echo "‚ö†Ô∏è  Note: Some changes may require a full shell restart"; \
		fi; \
	else \
		echo "‚ö†Ô∏è  Shell configuration file not found: $$SHELL_RC"; \
	fi

# Restart shell (provides instructions and helper)
restart-shell:
	@echo "üîÑ Restarting shell..."
	@echo "üí° Choose one of these options:"
	@echo ""
	@echo "  1Ô∏è‚É£  Quick reload (recommended):"
	@SHELL_RC=$$($(MAKE) get-shell-rc -s); \
	if echo "$$SHELL" | grep -q "zsh"; then \
		echo "     source $$SHELL_RC  # (zsh)"; \
	elif echo "$$SHELL" | grep -q "bash"; then \
		echo "     source $$SHELL_RC  # (bash)"; \
	else \
		echo "     source $$SHELL_RC  # ($$(basename $$SHELL))"; \
	fi
	@echo ""
	@echo "  2Ô∏è‚É£  Full shell restart:"
	@echo "     exec $$SHELL"
	@echo ""
	@echo "  3Ô∏è‚É£  New terminal session:"
	@echo "     Open a new terminal window/tab"
	@echo ""
	@echo "üöÄ Auto-executing option 1 (quick reload)..."
	@$(MAKE) reload-shell-config
